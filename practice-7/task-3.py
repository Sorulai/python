# 3. Реализовать программу работы с органическими клетками.
# Необходимо создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки.
# Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.

class Cell:
    def __init__(self, count_cell):
        self.count_cell = count_cell

    def __add__(self, other):
        return self.count_cell + other.count_cell

    def __sub__(self, other):
        if self.count_cell > other.count_cell:
            return self.count_cell - other.count_cell
        else:
            return 'Разность клеток должна быть больше нуля'

    def __mul__(self, other):
        return self.count_cell * other.count_cell

    def __truediv__(self, other):
        try:
            return int(self.count_cell / other.count_cell)
        except ZeroDivisionError:
            return 'На ноль делить нельзя'

    def make_order(self, count_cell_in_ranks):
        s = ''
        if self.count_cell % count_cell_in_ranks == 0:
            res = int(self.count_cell / count_cell_in_ranks)
            for i in range(0, res):
                s += '*' * count_cell_in_ranks + '\n'
            return s
        else:
            res = int(self.count_cell / count_cell_in_ranks)
            num = self.count_cell - (count_cell_in_ranks * res)
            for i in range(0, res):
                s += '*' * count_cell_in_ranks + '\n'
            s += '*' * num
            return s


cell1 = Cell(21)
cell2 = Cell(4)
print(f'Сумма = {cell1 + cell2}')
print(f'Разность большего числа на меньшее число = {cell1 - cell2}')
print(f'Разность меньшего числа на большее число = {cell2 - cell1}')
print(f'Умножение = {cell1 * cell2}')
print(f'Целочисленное деление = {cell1/cell2}')
print('----------')
print(cell1.make_order(5))
